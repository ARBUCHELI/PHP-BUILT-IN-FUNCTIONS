# INTRO TO BUILT-IN PHP FUNCTIONS
---------------------------------

* Introduction
--------------
	If you’ve been paying attention so far, you might have picked up a theme in programming—shortcuts. Defining our own functions gives us an easier way to repeat similar code 
	throughout a program. But some tasks are so common that the language comes with them by default.

	PHP comes with a number of built-in functions. These functions—also known as internal functions— can be invoked without writing them ourselves. In this lesson, we’ll explore some 
	useful built-in functions and empower you to discover new built-in functions yourself. This will quickly become an essential part of your developer toolkit!

	Let’s get started.

index.php
---------
<?php
echo("This works!\n");

echo "This also works!\n";

//echo("This would NOT work", "\n");

echo "Buuuut!", " ", "This", " ", "does!", "\n";

===================================================================================================================================================================

* Working with Variables
------------------------
	PHP includes useful built-in functions for getting information about variables. The gettype() function takes a variable as its argument and returns a string value representing the 
	data type of the argument.

		$name = "Aisle Nevertell";
		$age = 1000000;
 
		echo gettype($name); // Prints: string
 
		echo gettype($age); // Prints: integer

	Notice that we didn’t write a definition for the gettype() function ourselves—it’s built into PHP. Since the function is included within the language itself, we can just call it 
	anywhere within our PHP code.

	Let’s take a look at another built-in function! The var_dump() function also takes a variable argument. It prints details about the argument it receives.

		var_dump($name); // Prints: string(15) "Aisle Nevertell"
 
		var_dump($age); // Prints: int(1000000)

	In the code above, we first used var_dump() to print information about the variable $name. string(15)—the variable’s type and length—were printed followed by the value held by the 
	variable.

	Next, we used var_dump() to print information about the variable $age. Here, the integer is printed within the parentheses.

	As we learn more data types—especially increasingly complex data types—we’ll see how useful these two functions can be. For now, let’s practice using them with the types of data 
	we know!

index.php
---------
<?php
namespace Codecademy;

$first = "Welcome to the magical world of built-in functions.";
  
$second = 82137012983; 

//Write your code below:
echo gettype($first);
echo gettype($second);

echo var_dump($first);
echo var_dump($second);

==================================================================================================================================================================

* String Functions
------------------
	We can find PHP built-in functions to accomplish common tasks. Need to reverse a string? There’s a built-in function for that!

	The strrev() function takes in a string as its argument and returns a string with all of the characters of the original string in reverse order.

	Let’s see it in action:

		echo strrev("Hello, World!"); // Prints: !dlroW ,olleH

	Remember that we can use the values returned from functions directly (rather than saving them into variables). In the code above, we used echo to print the value returned from 
	invoking the strrev() function with the string "Hello, World!" as its argument.

	PHP also comes with built-in functions to change the capitalization of a string. We can use the strtolower() function to transform an argument string into all lowercase letters:

		echo strtolower("HeLLo"); // Prints: hello

	Built-in functions often have multiple parameters. The str_repeat() function takes a string as its first argument and a number as its second. It returns a string containing the 
	argument string repeated the argument number of times.

		echo str_repeat("hi", 10); // Prints: hihihihihihihihihihi 

	In the above code we used echo to print the value returned from invoking str_repeat() with "hi" and 10 as its arguments—"hihihihihihihihihihi" .

	Let’s practice!

index.php
---------
<?php
namespace Codecademy;

// Write your code below:
echo strrev(".pu ti peeK .taerg gniod er'uoY");

echo strtolower("SOON, tHiS WILL Look NoRmAL.");

echo str_repeat("\nThere's no place like home.\n", 3);

==================================================================================================================================================================

* Working with Substrings
-------------------------
	A substring is a portion of a string. For example, "hello" is a substring of the string "Oh hello, how are you?" and "el" is a substring of the string "hello". Manipulating 
	strings is very common in programming, and working with substrings is often necessary.

	The substr_count() function returns the number of instances of a substring within a string. It takes two arguments, the string to search through—sometimes called the haystack— and 
	the string to search for—sometimes called the needle.

		$story = "I was like, \"Dude, like just tell me what you like think because like everyone else is like being totally honest, and like I just want to know what you like 
		think.\" So like I don't know...";
 
		echo substr_count($story, "like"); // Prints: 8

	In the code above, we invoked the substr_count() function, passing in $story as the haystack and "like" as the needle. We used echo to print the returned result—8, which is the 
	number of times the substring "like" appears in the $story string.

	Let’s practice!

index.php
---------
<?php
namespace Codecademy;

$essay_one = "I really enjoyed the book. I thought the characters were really interesting. The plot of the novel was really engaging. I really felt the characters' emotions. They were really well-written. I really wish the ending had been different though.";
  
$essay_two = "Obviously this is a really good book. You obviously would not have made us read it if it wasn't. I felt like the ending was too obvious though. It was so obvious who did it right away. I think the thing with the light was obviously a metaphor for life. It would have been better if the characters were less obvious about their secrets.";  

// Write your code below:
echo substr_count($essay_one, "really");
echo substr_count($essay_two, "obvious");

==================================================================================================================================================================

* Number Functions
------------------
	Another common task in programming is working with numbers, so it shouldn’t surprise us that PHP comes with some handy built-in functions for working with numbers.

	The abs() function returns the absolute value of its number argument:

		echo abs(-10.99); // Prints: 10.99
 
		echo abs(127); // Prints: 127

	Another useful function is the round() function which returns the nearest integer to its number argument:

		echo round(1.2); // Prints: 1
 
		echo round(1.5); // Prints: 2
 
		echo round(1298736.821763876); // Prints: 1298737

	Let’s practice!

index.php
---------
<?php
namespace Codecademy;

// Write your code below:
function calculateDistance($num1, $num2) {
  return abs($num1 - $num2);
}

echo calculateDistance(-1, 4);
echo calculateDistance(4, -1);
echo calculateDistance(3, 7);
echo calculateDistance(7, 3);

function calculateTip($cost) {
  return round($cost + ($cost * 0.18));
}

echo calculateTip(100);
echo calculateTip(35);
echo calculateTip(88.77);

==================================================================================================================================================================

* Generating Random Numbers
---------------------------
	Generating random numbers may not seem obviously useful, but, as your programs become increasingly complicated, you’ll see this is actually a common task—for example to randomize 
	data for testing.

	The rand() function returns a random integer. We have some flexibility with how we invoke it. Invoking rand() with no arguments will return a number between 0 and the largest 
	number our current environment will allow; this is a quirk of PHP. We can find out what this number is by invoking a different built-in function, getrandmax():

		$max = getrandmax(); 
 
		echo $max;
 
		echo rand(); // Prints a number between 0 and $max

	In the code above, we assigned the largest possible random integer to the $max variable by invoking the getrandmax() function.

	Next, we used echo to print a random integer. This integer will be a number between 0 and $max.

	Functions often have a strict definition which dictates exactly which arguments it expects to be called with and results in an error otherwise. The rand() function, however is 
	somewhat flexible.

	If we’d like more control over the random number we generate, we can invoke the rand() function with two integer arguments representing the smallest allowable random number and 
	the largest allowable random number. Fun fact: the second argument provided can be larger than getrandmax(). These numbers are inclusive meaning the arguments we pass in could be 
	generated by the function.

		echo rand(1, 2); // Prints either 1 or 2
 
		echo rand(5, 10); // Prints a number between 5 and 10 (inclusive!)
 
		echo rand(1, 100); // Prints a number between 1 and 100 (inclusive!)

	Ok let’s get random!

index.php
---------
<?php
namespace Codecademy;

// Write your code below:
echo getrandmax();

echo "\n";

echo rand();

echo "\n";

echo rand(1, 52);

==================================================================================================================================================================

* Documentation
---------------
	In order to understand built-in functions we’ve never used before, we’ll want to get comfortable understanding how they are represented in the documentation. Documentation 
	typically includes:

		. The name of the function.

		. The versions of the PHP language the function is available in.

		. An overview of how the function works.

		. Additional details on the parameters and return value.

		. Examples of the function in use.

		. User comments further explaining features of the function.

	The description section can be confusing, so we’ll break that down.

	Here’s the description for the abs() function:

		abs ( mixed $number ) : number

	Here we see the function name followed by parentheses. The parentheses contain information about the function’s parameter(s)—first the parameter’s type followed by its name. The 
	parameter for abs() has the type mixed because there are multiple data types the function will accept (an integer or a float). The parameter for abs() is named $number. After the 
	parentheses is a colon (:) followed by number; this is the data type the function will return.

	A function that prints something but doesn’t return a value will have :void instead of a return type. Similarly, a function that doesn’t accept parameters will have void within 
	its parentheses.

	Let’s look at a more complicated example. Here’s the description for the substr_count() function:

		substr_count ( string $haystack , string $needle [, int $offset = 0 [, int $length ]] ) : int

	Earlier in this lesson, we invoked substr_count() with only the two string parameters ($haystack and $needle). But functions can have optional parameters. This means they’ll work 
	with or without them. These parameters are wrapped in square brackets ([ ]) in the function’s description. An optional parameter may have a default value, this is the value that 
	will be used if no argument is passed into the function. The default value is indicated with an equal sign (=).

	The substr_count() function accepts two additional integer arguments—$offset and $length. $offset has a default value of 0. Take a look at the documentation and see if you can 
	figure out what they do.

	Let’s practice reading some function descriptions!

index.php
---------
<?php
namespace Codecademy;

$a = 29;
$b = "You did it!";
$c = STR_PAD_BOTH;
$d = "*~*";

// Write your code below:
echo str_pad($b, 29, $d, $c);

==================================================================================================================================================================

* Finding Functions
-------------------
	In order to find out about built-in functions (and other language features), you’ll want to get comfortable exploring the PHP documentation. The docs can get a little 
	overwhelming—for example, this seemingly infinite index of PHP functions is pretty unwieldy.

	The documentation contains some lists organized by topic: this is a list of PHP string functions and this is a list of math functions.

	It’s often faster to use Google to navigate to the right part of the official documentation (php.net). For example, when I googled “PHP absolute value” the first result was a link 
	to the abs() function in the PHP documentation.

	Let’s practice discovering new functions!

index.php
---------
<?php
namespace Codecademy;

// Write your code below:
function convertToShout($str) {
  return strtoupper($str)."!";
}

echo convertToShout("woah there, buddy");

echo "\n";

echo convertToShout("i just don't know");

echo "\n";

echo convertToShout("oh, ok, that's fine");

echo "\n";

echo convertToShout("it's nice to meet you");

echo "\n";
echo "\n";

function tipGenerously($cost) {
  return ceil($cost + ($cost * 0.2));
}

echo tipGenerously(100.00);

echo "\n";

echo tipGenerously(982.27);

echo "\n";

echo tipGenerously(15.67);

echo "\n";

echo tipGenerously(66.18);

echo "\n";

echo tipGenerously(21.65);

echo "\n";
echo "\n";

function calculateCircleArea($diameter) {
  $piValue = pi();
  return $piValue*(($diameter/2) ** 2);
}

echo calculateCircleArea(25);
echo "\n";
echo calculateCircleArea(30);
echo "\n";
echo calculateCircleArea(872);
echo "\n";
echo calculateCircleArea(6);
echo "\n";
echo calculateCircleArea(29);

==================================================================================================================================================================

* Review
--------
	In this lesson, you learned that built-in functions are functions provided by PHP. You learned about several specific built-in functions, how to understand a function’s 
	description in the documentation, and how to discover new built-in functions.

	We’ve only started to scratch the surface of all of the functions built into the PHP language. As you continue to learn PHP, you’ll come across many useful built-in functions. As 
	you write your own code, if a task you’re performing feels tedious but common, check to see if there’s a built-in function to do it for you!

	One final note: Throughout this lesson, you may have noticed that PHP’s built-in functions often don’t follow the function naming conventions we outlined. PHP’s built-in functions 
	aren’t named following a single convention—some are snake-cased while others have unseparated words. It’s quirks like this that can make PHP a bit frustrating to learn. Be patient 
	with yourself as you get comfortable with the built-in functions most useful to you, and don’t hesitate to look things up.

index.php
---------
<?php
$string_var = "Check it out";
echo strtoupper($string_var) . "!\n";

echo ceil(8.873);
echo "\n";
  
echo pi();
echo "\n";

echo str_pad("PHP", 30, "*^*-", STR_PAD_BOTH);
echo "\n";

echo getrandmax();
echo "\n";

echo rand();
echo "\n";

echo rand(1, 52);
echo "\n";

echo abs(-1287);
echo "\n";

echo round(8723.999);
echo "\n";

echo substr_count($string_var, " ");
echo "\n";

echo strrev("\n.pu ti peeK .taerg gniod er'uoY");

echo strtolower("SOON, tHiS WILL Look NoRmAL.\n");

echo str_repeat("There's no place like home.\n", 3);

echo gettype($string_var);
echo "\n";
echo var_dump($string_var);





















